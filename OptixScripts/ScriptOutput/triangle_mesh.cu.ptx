//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-21373419
// Cuda compilation tools, release 8.0, V8.0.55
// Based on LLVM 3.4svn
//

.version 5.0
.target sm_50
.address_size 64

	// .globl	_Z14mesh_intersecti
.global .align 1 .b8 vertex_buffer[1];
.global .align 1 .b8 normal_buffer[1];
.global .align 1 .b8 texcoord_buffer[1];
.global .align 1 .b8 vindex_buffer[1];
.global .align 1 .b8 nindex_buffer[1];
.global .align 1 .b8 tindex_buffer[1];
.global .align 8 .b8 texcoord[12];
.global .align 8 .b8 geometric_normal[12];
.global .align 8 .b8 shading_normal[12];
.global .align 4 .b8 ray[36];
.global .align 8 .b8 v1[12];
.global .align 8 .b8 v2[12];
.global .align 8 .b8 v3[12];
.global .align 8 .u64 _ZN21rti_internal_register20reg_bitness_detectorE;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail0E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail1E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail2E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail3E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail4E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail5E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail6E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail7E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail8E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail0E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail1E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail2E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail3E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail4E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail5E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail6E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail7E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail8E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_xE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_yE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_zE;
.global .align 4 .b8 _ZN21rti_internal_typeinfo8texcoordE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo16geometric_normalE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo14shading_normalE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo3rayE[8] = {82, 97, 121, 0, 36, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo2v1E[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo2v2E[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo2v3E[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 1 .b8 _ZN21rti_internal_typename8texcoordE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 1 .b8 _ZN21rti_internal_typename16geometric_normalE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 1 .b8 _ZN21rti_internal_typename14shading_normalE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 1 .b8 _ZN21rti_internal_typename3rayE[11] = {111, 112, 116, 105, 120, 58, 58, 82, 97, 121, 0};
.global .align 1 .b8 _ZN21rti_internal_typename2v1E[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 1 .b8 _ZN21rti_internal_typename2v2E[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 1 .b8 _ZN21rti_internal_typename2v3E[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 4 .u32 _ZN21rti_internal_typeenum8texcoordE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum16geometric_normalE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum14shading_normalE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum3rayE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum2v1E = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum2v2E = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum2v3E = 4919;
.global .align 1 .b8 _ZN21rti_internal_semantic8texcoordE[19] = {97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 116, 101, 120, 99, 111, 111, 114, 100, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic16geometric_normalE[27] = {97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 103, 101, 111, 109, 101, 116, 114, 105, 99, 95, 110, 111, 114, 109, 97, 108, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic14shading_normalE[25] = {97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 115, 104, 97, 100, 105, 110, 103, 95, 110, 111, 114, 109, 97, 108, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic3rayE[13] = {114, 116, 67, 117, 114, 114, 101, 110, 116, 82, 97, 121, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic2v1E[13] = {97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 118, 49, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic2v2E[13] = {97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 118, 50, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic2v3E[13] = {97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 118, 51, 0};
.global .align 1 .b8 _ZN23rti_internal_annotation8texcoordE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation16geometric_normalE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation14shading_normalE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation3rayE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation2v1E[1];
.global .align 1 .b8 _ZN23rti_internal_annotation2v2E[1];
.global .align 1 .b8 _ZN23rti_internal_annotation2v3E[1];

.visible .entry _Z14mesh_intersecti(
	.param .u32 _Z14mesh_intersecti_param_0
)
{
	.reg .pred 	%p<16>;
	.reg .f32 	%f<126>;
	.reg .b32 	%r<47>;
	.reg .b64 	%rd<104>;


	ld.param.s32 	%rd4, [_Z14mesh_intersecti_param_0];
	mov.u64 	%rd26, vindex_buffer;
	cvta.global.u64 	%rd3, %rd26;
	mov.u32 	%r10, 1;
	mov.u32 	%r11, 12;
	mov.u64 	%rd25, 0;
	// inline asm
	call (%rd2), _rt_buffer_get_64, (%rd3, %r10, %r11, %rd4, %rd25, %rd25, %rd25);
	// inline asm
	ld.s32 	%rd10, [%rd2];
	mov.u64 	%rd27, vertex_buffer;
	cvta.global.u64 	%rd9, %rd27;
	ld.s32 	%rd16, [%rd2+4];
	ld.s32 	%rd22, [%rd2+8];
	// inline asm
	call (%rd8), _rt_buffer_get_64, (%rd9, %r10, %r11, %rd10, %rd25, %rd25, %rd25);
	// inline asm
	ld.f32 	%f3, [%rd8+8];
	ld.f32 	%f2, [%rd8+4];
	ld.f32 	%f1, [%rd8];
	// inline asm
	call (%rd14), _rt_buffer_get_64, (%rd9, %r10, %r11, %rd16, %rd25, %rd25, %rd25);
	// inline asm
	ld.f32 	%f6, [%rd14+8];
	ld.f32 	%f5, [%rd14+4];
	ld.f32 	%f4, [%rd14];
	// inline asm
	call (%rd20), _rt_buffer_get_64, (%rd9, %r10, %r11, %rd22, %rd25, %rd25, %rd25);
	// inline asm
	sub.f32 	%f25, %f4, %f1;
	sub.f32 	%f26, %f5, %f2;
	sub.f32 	%f27, %f6, %f3;
	ld.f32 	%f9, [%rd20+8];
	ld.f32 	%f8, [%rd20+4];
	ld.f32 	%f7, [%rd20];
	sub.f32 	%f28, %f1, %f7;
	sub.f32 	%f29, %f2, %f8;
	sub.f32 	%f30, %f3, %f9;
	mul.f32 	%f31, %f27, %f29;
	mul.f32 	%f32, %f26, %f30;
	sub.f32 	%f10, %f31, %f32;
	mul.f32 	%f33, %f25, %f30;
	mul.f32 	%f34, %f27, %f28;
	sub.f32 	%f11, %f33, %f34;
	mul.f32 	%f35, %f26, %f28;
	mul.f32 	%f36, %f25, %f29;
	sub.f32 	%f12, %f35, %f36;
	ld.global.f32 	%f37, [ray+12];
	ld.global.f32 	%f38, [ray+16];
	mul.f32 	%f39, %f38, %f11;
	fma.rn.f32 	%f40, %f37, %f10, %f39;
	ld.global.f32 	%f41, [ray+20];
	fma.rn.f32 	%f42, %f41, %f12, %f40;
	rcp.rn.f32 	%f43, %f42;
	ld.global.f32 	%f44, [ray];
	sub.f32 	%f45, %f1, %f44;
	ld.global.f32 	%f46, [ray+4];
	sub.f32 	%f47, %f2, %f46;
	ld.global.f32 	%f48, [ray+8];
	sub.f32 	%f49, %f3, %f48;
	mul.f32 	%f50, %f43, %f45;
	mul.f32 	%f51, %f43, %f47;
	mul.f32 	%f52, %f43, %f49;
	mul.f32 	%f53, %f38, %f52;
	mul.f32 	%f54, %f51, %f41;
	sub.f32 	%f55, %f53, %f54;
	mul.f32 	%f56, %f50, %f41;
	mul.f32 	%f57, %f52, %f37;
	sub.f32 	%f58, %f56, %f57;
	mul.f32 	%f59, %f51, %f37;
	mul.f32 	%f60, %f50, %f38;
	sub.f32 	%f61, %f59, %f60;
	mul.f32 	%f62, %f29, %f58;
	fma.rn.f32 	%f63, %f28, %f55, %f62;
	fma.rn.f32 	%f13, %f30, %f61, %f63;
	mul.f32 	%f64, %f26, %f58;
	fma.rn.f32 	%f65, %f25, %f55, %f64;
	fma.rn.f32 	%f14, %f27, %f61, %f65;
	mul.f32 	%f66, %f11, %f51;
	fma.rn.f32 	%f67, %f10, %f50, %f66;
	fma.rn.f32 	%f15, %f12, %f52, %f67;
	ld.global.f32 	%f68, [ray+32];
	setp.lt.f32	%p1, %f15, %f68;
	ld.global.f32 	%f69, [ray+28];
	setp.gt.f32	%p2, %f15, %f69;
	and.pred  	%p3, %p1, %p2;
	setp.ge.f32	%p4, %f13, 0f00000000;
	and.pred  	%p5, %p3, %p4;
	setp.ge.f32	%p6, %f14, 0f00000000;
	and.pred  	%p7, %p5, %p6;
	add.f32 	%f70, %f13, %f14;
	setp.le.f32	%p8, %f70, 0f3F800000;
	and.pred  	%p9, %p7, %p8;
	@!%p9 bra 	BB0_14;
	bra.uni 	BB0_1;

BB0_1:
	// inline asm
	call (%r12), _rt_potential_intersection, (%f15);
	// inline asm
	setp.eq.s32	%p10, %r12, 0;
	@%p10 bra 	BB0_14;

	st.global.v2.f32 	[v1], {%f1, %f2};
	st.global.f32 	[v1+8], %f3;
	st.global.v2.f32 	[v2], {%f4, %f5};
	st.global.f32 	[v2+8], %f6;
	st.global.v2.f32 	[v3], {%f7, %f8};
	st.global.f32 	[v3+8], %f9;
	mov.u64 	%rd33, normal_buffer;
	cvta.global.u64 	%rd32, %rd33;
	// inline asm
	call (%rd28, %rd29, %rd30, %rd31), _rt_buffer_get_size_64, (%rd32, %r10, %r11);
	// inline asm
	cvt.u32.u64	%r15, %rd28;
	setp.eq.s32	%p11, %r15, 0;
	@%p11 bra 	BB0_7;

	mov.u64 	%rd39, nindex_buffer;
	cvta.global.u64 	%rd38, %rd39;
	// inline asm
	call (%rd34, %rd35, %rd36, %rd37), _rt_buffer_get_size_64, (%rd38, %r10, %r11);
	// inline asm
	cvt.u32.u64	%r18, %rd34;
	setp.eq.s32	%p12, %r18, 0;
	@%p12 bra 	BB0_7;

	// inline asm
	call (%rd40), _rt_buffer_get_64, (%rd38, %r10, %r11, %rd4, %rd25, %rd25, %rd25);
	// inline asm
	ld.u32 	%r3, [%rd40+8];
	ld.u32 	%r1, [%rd40+4];
	ld.u32 	%r2, [%rd40];
	or.b32  	%r21, %r2, %r1;
	or.b32  	%r22, %r21, %r3;
	setp.lt.s32	%p13, %r22, 0;
	neg.f32 	%f125, %f10;
	neg.f32 	%f124, %f11;
	neg.f32 	%f123, %f12;
	@%p13 bra 	BB0_6;

	cvt.s64.s32	%rd49, %r2;
	// inline asm
	call (%rd47), _rt_buffer_get_64, (%rd32, %r10, %r11, %rd49, %rd25, %rd25, %rd25);
	// inline asm
	ld.f32 	%f72, [%rd47+8];
	ld.f32 	%f73, [%rd47+4];
	ld.f32 	%f74, [%rd47];
	cvt.s64.s32	%rd55, %r1;
	// inline asm
	call (%rd53), _rt_buffer_get_64, (%rd32, %r10, %r11, %rd55, %rd25, %rd25, %rd25);
	// inline asm
	ld.f32 	%f75, [%rd53+8];
	ld.f32 	%f76, [%rd53+4];
	ld.f32 	%f77, [%rd53];
	cvt.s64.s32	%rd61, %r3;
	// inline asm
	call (%rd59), _rt_buffer_get_64, (%rd32, %r10, %r11, %rd61, %rd25, %rd25, %rd25);
	// inline asm
	ld.f32 	%f78, [%rd59+8];
	ld.f32 	%f79, [%rd59+4];
	ld.f32 	%f80, [%rd59];
	mul.f32 	%f81, %f14, %f80;
	mul.f32 	%f82, %f14, %f79;
	mul.f32 	%f83, %f14, %f78;
	fma.rn.f32 	%f84, %f13, %f77, %f81;
	fma.rn.f32 	%f85, %f13, %f76, %f82;
	fma.rn.f32 	%f86, %f13, %f75, %f83;
	mov.f32 	%f87, 0f3F800000;
	sub.f32 	%f88, %f87, %f13;
	sub.f32 	%f89, %f88, %f14;
	fma.rn.f32 	%f90, %f89, %f74, %f84;
	fma.rn.f32 	%f91, %f89, %f73, %f85;
	fma.rn.f32 	%f92, %f89, %f72, %f86;
	mul.f32 	%f93, %f91, %f91;
	fma.rn.f32 	%f94, %f90, %f90, %f93;
	fma.rn.f32 	%f95, %f92, %f92, %f94;
	sqrt.rn.f32 	%f96, %f95;
	rcp.rn.f32 	%f97, %f96;
	mul.f32 	%f98, %f97, %f92;
	mul.f32 	%f99, %f97, %f91;
	mul.f32 	%f100, %f97, %f90;
	st.global.v2.f32 	[shading_normal], {%f100, %f99};
	st.global.f32 	[shading_normal+8], %f98;
	bra.uni 	BB0_9;

BB0_7:
	neg.f32 	%f125, %f10;
	neg.f32 	%f124, %f11;
	st.global.v2.f32 	[shading_normal], {%f125, %f124};
	neg.f32 	%f123, %f12;
	bra.uni 	BB0_8;

BB0_6:
	st.global.v2.f32 	[shading_normal], {%f125, %f124};

BB0_8:
	st.global.f32 	[shading_normal+8], %f123;

BB0_9:
	st.global.v2.f32 	[geometric_normal], {%f125, %f124};
	st.global.f32 	[geometric_normal+8], %f123;
	mov.u64 	%rd71, texcoord_buffer;
	cvta.global.u64 	%rd70, %rd71;
	mov.u32 	%r30, 8;
	// inline asm
	call (%rd66, %rd67, %rd68, %rd69), _rt_buffer_get_size_64, (%rd70, %r10, %r30);
	// inline asm
	cvt.u32.u64	%r31, %rd66;
	setp.eq.s32	%p14, %r31, 0;
	@%p14 bra 	BB0_12;

	mov.u64 	%rd77, tindex_buffer;
	cvta.global.u64 	%rd76, %rd77;
	// inline asm
	call (%rd72, %rd73, %rd74, %rd75), _rt_buffer_get_size_64, (%rd76, %r10, %r11);
	// inline asm
	cvt.u32.u64	%r34, %rd72;
	setp.eq.s32	%p15, %r34, 0;
	@%p15 bra 	BB0_12;

	// inline asm
	call (%rd78), _rt_buffer_get_64, (%rd76, %r10, %r11, %rd4, %rd25, %rd25, %rd25);
	// inline asm
	ld.s32 	%rd86, [%rd78];
	ld.s32 	%rd92, [%rd78+4];
	ld.s32 	%rd98, [%rd78+8];
	// inline asm
	call (%rd84), _rt_buffer_get_64, (%rd70, %r10, %r30, %rd86, %rd25, %rd25, %rd25);
	// inline asm
	ld.v2.f32 	{%f101, %f102}, [%rd84];
	// inline asm
	call (%rd90), _rt_buffer_get_64, (%rd70, %r10, %r30, %rd92, %rd25, %rd25, %rd25);
	// inline asm
	ld.v2.f32 	{%f105, %f106}, [%rd90];
	// inline asm
	call (%rd96), _rt_buffer_get_64, (%rd70, %r10, %r30, %rd98, %rd25, %rd25, %rd25);
	// inline asm
	ld.v2.f32 	{%f109, %f110}, [%rd96];
	mul.f32 	%f113, %f14, %f109;
	mul.f32 	%f114, %f14, %f110;
	fma.rn.f32 	%f115, %f13, %f105, %f113;
	fma.rn.f32 	%f116, %f13, %f106, %f114;
	mov.f32 	%f117, 0f3F800000;
	sub.f32 	%f118, %f117, %f13;
	sub.f32 	%f119, %f118, %f14;
	fma.rn.f32 	%f120, %f119, %f102, %f116;
	fma.rn.f32 	%f121, %f119, %f101, %f115;
	st.global.v2.f32 	[texcoord], {%f121, %f120};
	mov.u32 	%r43, 0;
	st.global.u32 	[texcoord+8], %r43;
	bra.uni 	BB0_13;

BB0_12:
	mov.u32 	%r44, 0;
	st.global.u32 	[texcoord+8], %r44;
	mov.f32 	%f122, 0f00000000;
	st.global.v2.f32 	[texcoord], {%f122, %f122};

BB0_13:
	mov.u32 	%r46, 0;
	// inline asm
	call (%r45), _rt_report_intersection, (%r46);
	// inline asm

BB0_14:
	ret;
}

	// .globl	_Z21volume_mesh_intersecti
.visible .entry _Z21volume_mesh_intersecti(
	.param .u32 _Z21volume_mesh_intersecti_param_0
)
{
	.reg .pred 	%p<19>;
	.reg .f32 	%f<163>;
	.reg .b32 	%r<54>;
	.reg .b64 	%rd<104>;


	ld.param.u32 	%r4, [_Z21volume_mesh_intersecti_param_0];
	cvt.s64.s32	%rd4, %r4;
	mov.u64 	%rd26, vindex_buffer;
	cvta.global.u64 	%rd3, %rd26;
	mov.u32 	%r11, 1;
	mov.u32 	%r12, 12;
	mov.u64 	%rd25, 0;
	// inline asm
	call (%rd2), _rt_buffer_get_64, (%rd3, %r11, %r12, %rd4, %rd25, %rd25, %rd25);
	// inline asm
	ld.s32 	%rd10, [%rd2];
	mov.u64 	%rd27, vertex_buffer;
	cvta.global.u64 	%rd9, %rd27;
	ld.s32 	%rd16, [%rd2+4];
	ld.s32 	%rd22, [%rd2+8];
	// inline asm
	call (%rd8), _rt_buffer_get_64, (%rd9, %r11, %r12, %rd10, %rd25, %rd25, %rd25);
	// inline asm
	ld.f32 	%f20, [%rd8+8];
	ld.f32 	%f21, [%rd8+4];
	ld.f32 	%f22, [%rd8];
	// inline asm
	call (%rd14), _rt_buffer_get_64, (%rd9, %r11, %r12, %rd16, %rd25, %rd25, %rd25);
	// inline asm
	ld.f32 	%f23, [%rd14+8];
	ld.f32 	%f24, [%rd14+4];
	ld.f32 	%f25, [%rd14];
	// inline asm
	call (%rd20), _rt_buffer_get_64, (%rd9, %r11, %r12, %rd22, %rd25, %rd25, %rd25);
	// inline asm
	sub.f32 	%f26, %f25, %f22;
	sub.f32 	%f27, %f24, %f21;
	sub.f32 	%f28, %f23, %f20;
	ld.f32 	%f29, [%rd20+8];
	ld.f32 	%f30, [%rd20+4];
	ld.f32 	%f31, [%rd20];
	sub.f32 	%f32, %f22, %f31;
	sub.f32 	%f33, %f21, %f30;
	sub.f32 	%f34, %f20, %f29;
	mul.f32 	%f35, %f28, %f33;
	mul.f32 	%f36, %f27, %f34;
	sub.f32 	%f1, %f35, %f36;
	mul.f32 	%f37, %f26, %f34;
	mul.f32 	%f38, %f28, %f32;
	sub.f32 	%f2, %f37, %f38;
	mul.f32 	%f39, %f27, %f32;
	mul.f32 	%f40, %f26, %f33;
	sub.f32 	%f3, %f39, %f40;
	ld.global.f32 	%f41, [ray+12];
	ld.global.f32 	%f42, [ray+16];
	mul.f32 	%f43, %f42, %f2;
	fma.rn.f32 	%f44, %f41, %f1, %f43;
	ld.global.f32 	%f45, [ray+20];
	fma.rn.f32 	%f46, %f45, %f3, %f44;
	rcp.rn.f32 	%f47, %f46;
	ld.global.f32 	%f48, [ray];
	sub.f32 	%f49, %f22, %f48;
	ld.global.f32 	%f50, [ray+4];
	sub.f32 	%f51, %f21, %f50;
	ld.global.f32 	%f52, [ray+8];
	sub.f32 	%f53, %f20, %f52;
	mul.f32 	%f54, %f47, %f49;
	mul.f32 	%f55, %f47, %f51;
	mul.f32 	%f56, %f47, %f53;
	mul.f32 	%f57, %f42, %f56;
	mul.f32 	%f58, %f55, %f45;
	sub.f32 	%f59, %f57, %f58;
	mul.f32 	%f60, %f54, %f45;
	mul.f32 	%f61, %f56, %f41;
	sub.f32 	%f62, %f60, %f61;
	mul.f32 	%f63, %f55, %f41;
	mul.f32 	%f64, %f54, %f42;
	sub.f32 	%f65, %f63, %f64;
	mul.f32 	%f66, %f33, %f62;
	fma.rn.f32 	%f67, %f32, %f59, %f66;
	fma.rn.f32 	%f4, %f34, %f65, %f67;
	mul.f32 	%f68, %f27, %f62;
	fma.rn.f32 	%f69, %f26, %f59, %f68;
	fma.rn.f32 	%f5, %f28, %f65, %f69;
	mul.f32 	%f70, %f2, %f55;
	fma.rn.f32 	%f71, %f1, %f54, %f70;
	fma.rn.f32 	%f6, %f3, %f56, %f71;
	ld.global.f32 	%f72, [ray+32];
	setp.lt.f32	%p1, %f6, %f72;
	ld.global.f32 	%f73, [ray+28];
	setp.gt.f32	%p2, %f6, %f73;
	and.pred  	%p3, %p1, %p2;
	setp.ge.f32	%p4, %f4, 0f00000000;
	and.pred  	%p5, %p3, %p4;
	setp.ge.f32	%p6, %f5, 0f00000000;
	and.pred  	%p7, %p5, %p6;
	add.f32 	%f74, %f4, %f5;
	setp.le.f32	%p8, %f74, 0f3F800000;
	and.pred  	%p9, %p7, %p8;
	@!%p9 bra 	BB1_16;
	bra.uni 	BB1_1;

BB1_1:
	mad.lo.s32 	%r13, %r4, 1664525, 7271263;
	and.b32  	%r14, %r13, 16777215;
	cvt.rn.f32.u32	%f75, %r14;
	fma.rn.f32 	%f76, %f75, 0fB3800000, 0f3F800000;
	setp.lt.f32	%p10, %f76, 0f00800000;
	mul.f32 	%f77, %f76, 0f4B000000;
	selp.f32	%f7, %f77, %f76, %p10;
	selp.f32	%f78, 0fC1B80000, 0f00000000, %p10;
	mov.b32 	 %r15, %f7;
	add.s32 	%r16, %r15, -1059760811;
	and.b32  	%r17, %r16, -8388608;
	sub.s32 	%r18, %r15, %r17;
	mov.b32 	 %f79, %r18;
	cvt.rn.f32.s32	%f80, %r17;
	mov.f32 	%f81, 0f34000000;
	fma.rn.f32 	%f82, %f80, %f81, %f78;
	add.f32 	%f83, %f79, 0fBF800000;
	mov.f32 	%f84, 0f3E1039F6;
	mov.f32 	%f85, 0fBE055027;
	fma.rn.f32 	%f86, %f85, %f83, %f84;
	mov.f32 	%f87, 0fBDF8CDCC;
	fma.rn.f32 	%f88, %f86, %f83, %f87;
	mov.f32 	%f89, 0f3E0F2955;
	fma.rn.f32 	%f90, %f88, %f83, %f89;
	mov.f32 	%f91, 0fBE2AD8B9;
	fma.rn.f32 	%f92, %f90, %f83, %f91;
	mov.f32 	%f93, 0f3E4CED0B;
	fma.rn.f32 	%f94, %f92, %f83, %f93;
	mov.f32 	%f95, 0fBE7FFF22;
	fma.rn.f32 	%f96, %f94, %f83, %f95;
	mov.f32 	%f97, 0f3EAAAA78;
	fma.rn.f32 	%f98, %f96, %f83, %f97;
	mov.f32 	%f99, 0fBF000000;
	fma.rn.f32 	%f100, %f98, %f83, %f99;
	mul.f32 	%f101, %f83, %f100;
	fma.rn.f32 	%f102, %f101, %f83, %f83;
	mov.f32 	%f103, 0f3F317218;
	fma.rn.f32 	%f159, %f82, %f103, %f102;
	setp.lt.u32	%p11, %r15, 2139095040;
	@%p11 bra 	BB1_3;

	mov.f32 	%f104, 0f7F800000;
	fma.rn.f32 	%f159, %f7, %f104, %f104;

BB1_3:
	add.f32 	%f106, %f159, %f159;
	setp.eq.f32	%p12, %f7, 0f00000000;
	selp.f32	%f107, 0fFF800000, %f106, %p12;
	add.f32 	%f105, %f6, %f107;
	// inline asm
	call (%r19), _rt_potential_intersection, (%f105);
	// inline asm
	setp.eq.s32	%p13, %r19, 0;
	@%p13 bra 	BB1_16;

	mov.u64 	%rd33, normal_buffer;
	cvta.global.u64 	%rd32, %rd33;
	// inline asm
	call (%rd28, %rd29, %rd30, %rd31), _rt_buffer_get_size_64, (%rd32, %r11, %r12);
	// inline asm
	cvt.u32.u64	%r22, %rd28;
	setp.eq.s32	%p14, %r22, 0;
	@%p14 bra 	BB1_9;

	mov.u64 	%rd39, nindex_buffer;
	cvta.global.u64 	%rd38, %rd39;
	// inline asm
	call (%rd34, %rd35, %rd36, %rd37), _rt_buffer_get_size_64, (%rd38, %r11, %r12);
	// inline asm
	cvt.u32.u64	%r25, %rd34;
	setp.eq.s32	%p15, %r25, 0;
	@%p15 bra 	BB1_9;

	// inline asm
	call (%rd40), _rt_buffer_get_64, (%rd38, %r11, %r12, %rd4, %rd25, %rd25, %rd25);
	// inline asm
	ld.u32 	%r3, [%rd40+8];
	ld.u32 	%r1, [%rd40+4];
	ld.u32 	%r2, [%rd40];
	or.b32  	%r28, %r2, %r1;
	or.b32  	%r29, %r28, %r3;
	setp.lt.s32	%p16, %r29, 0;
	neg.f32 	%f162, %f1;
	neg.f32 	%f161, %f2;
	neg.f32 	%f160, %f3;
	@%p16 bra 	BB1_8;

	cvt.s64.s32	%rd49, %r2;
	// inline asm
	call (%rd47), _rt_buffer_get_64, (%rd32, %r11, %r12, %rd49, %rd25, %rd25, %rd25);
	// inline asm
	ld.f32 	%f108, [%rd47+8];
	ld.f32 	%f109, [%rd47+4];
	ld.f32 	%f110, [%rd47];
	cvt.s64.s32	%rd55, %r1;
	// inline asm
	call (%rd53), _rt_buffer_get_64, (%rd32, %r11, %r12, %rd55, %rd25, %rd25, %rd25);
	// inline asm
	ld.f32 	%f111, [%rd53+8];
	ld.f32 	%f112, [%rd53+4];
	ld.f32 	%f113, [%rd53];
	cvt.s64.s32	%rd61, %r3;
	// inline asm
	call (%rd59), _rt_buffer_get_64, (%rd32, %r11, %r12, %rd61, %rd25, %rd25, %rd25);
	// inline asm
	ld.f32 	%f114, [%rd59+8];
	ld.f32 	%f115, [%rd59+4];
	ld.f32 	%f116, [%rd59];
	mul.f32 	%f117, %f5, %f116;
	mul.f32 	%f118, %f5, %f115;
	mul.f32 	%f119, %f5, %f114;
	fma.rn.f32 	%f120, %f4, %f113, %f117;
	fma.rn.f32 	%f121, %f4, %f112, %f118;
	fma.rn.f32 	%f122, %f4, %f111, %f119;
	mov.f32 	%f123, 0f3F800000;
	sub.f32 	%f124, %f123, %f4;
	sub.f32 	%f125, %f124, %f5;
	fma.rn.f32 	%f126, %f125, %f110, %f120;
	fma.rn.f32 	%f127, %f125, %f109, %f121;
	fma.rn.f32 	%f128, %f125, %f108, %f122;
	mul.f32 	%f129, %f127, %f127;
	fma.rn.f32 	%f130, %f126, %f126, %f129;
	fma.rn.f32 	%f131, %f128, %f128, %f130;
	sqrt.rn.f32 	%f132, %f131;
	rcp.rn.f32 	%f133, %f132;
	mul.f32 	%f134, %f133, %f128;
	mul.f32 	%f135, %f133, %f127;
	mul.f32 	%f136, %f133, %f126;
	st.global.v2.f32 	[shading_normal], {%f136, %f135};
	st.global.f32 	[shading_normal+8], %f134;
	bra.uni 	BB1_11;

BB1_9:
	neg.f32 	%f162, %f1;
	neg.f32 	%f161, %f2;
	st.global.v2.f32 	[shading_normal], {%f162, %f161};
	neg.f32 	%f160, %f3;
	bra.uni 	BB1_10;

BB1_8:
	st.global.v2.f32 	[shading_normal], {%f162, %f161};

BB1_10:
	st.global.f32 	[shading_normal+8], %f160;

BB1_11:
	st.global.v2.f32 	[geometric_normal], {%f162, %f161};
	st.global.f32 	[geometric_normal+8], %f160;
	mov.u64 	%rd71, texcoord_buffer;
	cvta.global.u64 	%rd70, %rd71;
	mov.u32 	%r37, 8;
	// inline asm
	call (%rd66, %rd67, %rd68, %rd69), _rt_buffer_get_size_64, (%rd70, %r11, %r37);
	// inline asm
	cvt.u32.u64	%r38, %rd66;
	setp.eq.s32	%p17, %r38, 0;
	@%p17 bra 	BB1_14;

	mov.u64 	%rd77, tindex_buffer;
	cvta.global.u64 	%rd76, %rd77;
	// inline asm
	call (%rd72, %rd73, %rd74, %rd75), _rt_buffer_get_size_64, (%rd76, %r11, %r12);
	// inline asm
	cvt.u32.u64	%r41, %rd72;
	setp.eq.s32	%p18, %r41, 0;
	@%p18 bra 	BB1_14;

	// inline asm
	call (%rd78), _rt_buffer_get_64, (%rd76, %r11, %r12, %rd4, %rd25, %rd25, %rd25);
	// inline asm
	ld.s32 	%rd86, [%rd78];
	ld.s32 	%rd92, [%rd78+4];
	ld.s32 	%rd98, [%rd78+8];
	// inline asm
	call (%rd84), _rt_buffer_get_64, (%rd70, %r11, %r37, %rd86, %rd25, %rd25, %rd25);
	// inline asm
	ld.v2.f32 	{%f137, %f138}, [%rd84];
	// inline asm
	call (%rd90), _rt_buffer_get_64, (%rd70, %r11, %r37, %rd92, %rd25, %rd25, %rd25);
	// inline asm
	ld.v2.f32 	{%f141, %f142}, [%rd90];
	// inline asm
	call (%rd96), _rt_buffer_get_64, (%rd70, %r11, %r37, %rd98, %rd25, %rd25, %rd25);
	// inline asm
	ld.v2.f32 	{%f145, %f146}, [%rd96];
	mul.f32 	%f149, %f5, %f145;
	mul.f32 	%f150, %f5, %f146;
	fma.rn.f32 	%f151, %f4, %f141, %f149;
	fma.rn.f32 	%f152, %f4, %f142, %f150;
	mov.f32 	%f153, 0f3F800000;
	sub.f32 	%f154, %f153, %f4;
	sub.f32 	%f155, %f154, %f5;
	fma.rn.f32 	%f156, %f155, %f138, %f152;
	fma.rn.f32 	%f157, %f155, %f137, %f151;
	st.global.v2.f32 	[texcoord], {%f157, %f156};
	mov.u32 	%r50, 0;
	st.global.u32 	[texcoord+8], %r50;
	bra.uni 	BB1_15;

BB1_14:
	mov.u32 	%r51, 0;
	st.global.u32 	[texcoord+8], %r51;
	mov.f32 	%f158, 0f00000000;
	st.global.v2.f32 	[texcoord], {%f158, %f158};

BB1_15:
	mov.u32 	%r53, 0;
	// inline asm
	call (%r52), _rt_report_intersection, (%r53);
	// inline asm

BB1_16:
	ret;
}

	// .globl	_Z11mesh_boundsiPf
.visible .entry _Z11mesh_boundsiPf(
	.param .u32 _Z11mesh_boundsiPf_param_0,
	.param .u64 _Z11mesh_boundsiPf_param_1
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<42>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<30>;


	ld.param.u64 	%rd3, [_Z11mesh_boundsiPf_param_1];
	ld.param.s32 	%rd6, [_Z11mesh_boundsiPf_param_0];
	mov.u64 	%rd28, vindex_buffer;
	cvta.global.u64 	%rd5, %rd28;
	mov.u32 	%r7, 1;
	mov.u32 	%r8, 12;
	mov.u64 	%rd27, 0;
	// inline asm
	call (%rd4), _rt_buffer_get_64, (%rd5, %r7, %r8, %rd6, %rd27, %rd27, %rd27);
	// inline asm
	ld.s32 	%rd12, [%rd4];
	mov.u64 	%rd29, vertex_buffer;
	cvta.global.u64 	%rd11, %rd29;
	ld.s32 	%rd18, [%rd4+4];
	ld.s32 	%rd24, [%rd4+8];
	// inline asm
	call (%rd10), _rt_buffer_get_64, (%rd11, %r7, %r8, %rd12, %rd27, %rd27, %rd27);
	// inline asm
	ld.f32 	%f3, [%rd10+8];
	ld.f32 	%f2, [%rd10+4];
	ld.f32 	%f1, [%rd10];
	// inline asm
	call (%rd16), _rt_buffer_get_64, (%rd11, %r7, %r8, %rd18, %rd27, %rd27, %rd27);
	// inline asm
	ld.f32 	%f6, [%rd16+8];
	ld.f32 	%f5, [%rd16+4];
	ld.f32 	%f4, [%rd16];
	// inline asm
	call (%rd22), _rt_buffer_get_64, (%rd11, %r7, %r8, %rd24, %rd27, %rd27, %rd27);
	// inline asm
	sub.f32 	%f11, %f4, %f1;
	sub.f32 	%f12, %f5, %f2;
	sub.f32 	%f13, %f6, %f3;
	ld.f32 	%f9, [%rd22+8];
	ld.f32 	%f8, [%rd22+4];
	ld.f32 	%f7, [%rd22];
	sub.f32 	%f14, %f7, %f1;
	sub.f32 	%f15, %f8, %f2;
	sub.f32 	%f16, %f9, %f3;
	mul.f32 	%f17, %f12, %f16;
	mul.f32 	%f18, %f13, %f15;
	sub.f32 	%f19, %f17, %f18;
	mul.f32 	%f20, %f13, %f14;
	mul.f32 	%f21, %f11, %f16;
	sub.f32 	%f22, %f20, %f21;
	mul.f32 	%f23, %f11, %f15;
	mul.f32 	%f24, %f12, %f14;
	sub.f32 	%f25, %f23, %f24;
	mul.f32 	%f26, %f22, %f22;
	fma.rn.f32 	%f27, %f19, %f19, %f26;
	fma.rn.f32 	%f28, %f25, %f25, %f27;
	sqrt.rn.f32 	%f10, %f28;
	mov.pred 	%p5, 0;
	setp.leu.f32	%p4, %f10, 0f00000000;
	@%p4 bra 	BB2_2;

	abs.f32 	%f29, %f10;
	setp.neu.f32	%p5, %f29, 0f7F800000;

BB2_2:
	cvta.to.global.u64 	%rd2, %rd3;
	@%p5 bra 	BB2_4;
	bra.uni 	BB2_3;

BB2_4:
	min.f32 	%f30, %f1, %f4;
	min.f32 	%f31, %f30, %f7;
	min.f32 	%f32, %f2, %f5;
	min.f32 	%f33, %f32, %f8;
	min.f32 	%f34, %f3, %f6;
	min.f32 	%f35, %f34, %f9;
	st.global.f32 	[%rd2], %f31;
	st.global.f32 	[%rd2+4], %f33;
	st.global.f32 	[%rd2+8], %f35;
	max.f32 	%f36, %f1, %f4;
	max.f32 	%f37, %f36, %f7;
	max.f32 	%f38, %f2, %f5;
	max.f32 	%f39, %f38, %f8;
	max.f32 	%f40, %f3, %f6;
	max.f32 	%f41, %f40, %f9;
	st.global.f32 	[%rd2+12], %f37;
	st.global.f32 	[%rd2+16], %f39;
	st.global.f32 	[%rd2+20], %f41;
	bra.uni 	BB2_5;

BB2_3:
	mov.u32 	%r9, 2096152002;
	st.global.u32 	[%rd2+8], %r9;
	st.global.u32 	[%rd2+4], %r9;
	st.global.u32 	[%rd2], %r9;
	mov.u32 	%r10, -51331646;
	st.global.u32 	[%rd2+20], %r10;
	st.global.u32 	[%rd2+16], %r10;
	st.global.u32 	[%rd2+12], %r10;

BB2_5:
	ret;
}


